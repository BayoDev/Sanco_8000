; This is the disassembly of the "FMT8003.COM" program for the Sanco 8003         
; found in the CP/M 2.2 image at this link:
;       https://archive.org/details/sanco-8003-cpm-2.2fr.dsqd
;
; By @BayoDev

ORG $0100

ld      sp,$0100                        ;[0100] 31 00 01
call    OUT_STRING                           ;[0103] cd e9 03

DB      $0D
DB      $0A
DB      "iBEX 8003 Formatter   Version 1.0"
DB      $0D
DB      $0A
DB      "1024 BYTE/SECTOR"
DB      $00

DRIVE_SEL_PROMPT:
call    OUT_STRING                           ;[013c] cd e9 03

DB      $0D
DB      $0A
DB      $0A
DB      "INITIALIZE (A-B)? "
DB      $00

call    IN_LINE                         ;[0155] cd c6 02
ld      a,($02d8)                       ;[0158] 3a d8 02    Get lenght of input string
or      a                               ;[015b] b7          
jp      z,RST_FLOPPY_AND_CPM            ;[015c] ca ec 02    Exit program if the input string is empty
cp      $02                             ;[015f] fe 02
jr      nc,DRIVE_SEL_PROMPT             ;[0161] 30 d9       Jump if the input string is > 2 char long
ld      a,($02d9)                       ;[0163] 3a d9 02    Load first input char
res     5,a                             ;[0166] cb af       Reset 5th bit of the A register
ld      ($0198),a                       ;[0168] 32 98 01    Change the next string to display the drive letter
cp      $41                             ;[016b] fe 41       Check if input == 'A'    
jr      c,DRIVE_SEL_PROMPT              ;[016d] 38 cd       Jump if the input is < than 'A' (Invalid input)
cp      $43                             ;[016f] fe 43       Check if input == 'B'  
jr      nc,DRIVE_SEL_PROMPT             ;[0171] 30 c9       Jump if the input is > than 'B' (Invalid input)
dec     a                               ;[0173] 3d          
and     $03                             ;[0174] e6 03
ld      (DRIVE_SEL),a                   ;[0176] 32 0c 04    Save drive selection in memory
call    OUT_STRING                      ;[0179] cd e9 03

DB      $0D
DB      $0A
DB      "INSERT NEW DISKETTE DRIVE "
DB      $00                             ;[0198] 00          This will contain the drive letter
DB      $3A             
DB      $0D
DB      $0A
DB      "THEN READY,TYPE RETURN"
DB      $00

call    IN_CHAR                         ;[01b3] cd 05 04
cp      $03                             ;[01b6] fe 03
jp      z,RST_FLOPPY_AND_CPM            ;[01b8] ca ec 02    Jump if input==0x03 (End of text)
cp      $0d                             ;[01bb] fe 0d       
jp      nz,DRIVE_SEL_PROMPT             ;[01bd] c2 3c 01    Jump if input!=0x0D (Carriage return)
call    OUT_STRING                      ;[01c0] cd e9 03    Print new line

DB $0D
DB $0A
DB $00

xor     a                               ;[01c6] af          Resets register A
ld      (TRACK_CUR),a                   ;[01c7] 32 0b 04    Set the current track to $00
ld      a,$08                           ;[01ca] 3e 08       
ld      ($03e8),a                       ;[01cc] 32 e8 03    Set $03e8 to $08
call    ZERO_SEEK                       ;[01cf] cd f4 02
FORMAT_LOOP:
call    L0373                           ;[01d2] cd 73 03
call    OUT_DISK_TRACE                  ;[01d5] cd ae 03
call    FORMAT_TRACK                    ;[01d8] cd 3d 03
ld      a,(DRIVE_SEL)                   ;[01db] 3a 0c 04
bit     2,a                             ;[01de] cb 57
jr      nz,$01ea                        ;[01e0] 20 08
set     2,a                             ;[01e2] cb d7       
ld      (DRIVE_SEL),a                   ;[01e4] 32 0c 04    Set DRIVE_SEL[2] to 1 if not already
jp      FORMAT_LOOP                     ;[01e7] c3 d2 01
res     2,a                             ;[01ea] cb 97       Reset 2nd bit of DRIVE_SEL
ld      (DRIVE_SEL),a                   ;[01ec] 32 0c 04
ld      a,(TRACK_CUR)                   ;[01ef] 3a 0b 04    
inc     a                               ;[01f2] 3c
ld      (TRACK_CUR),a                   ;[01f3] 32 0b 04    Increase current track
cp      $50                             ;[01f6] fe 50       Check if end of tracks
jp      z,START_VERIFY                  ;[01f8] ca 01 02    Jump if end of tracks reached
call    MOVE_HEAD                       ;[01fb] cd 19 03    Move head to current track
jp      FORMAT_LOOP                     ;[01fe] c3 d2 01    

START_VERIFY:    
call    OUT_STRING                      ;[0201] cd e9 03    

DB      $0D
DB      $0A
DB      "VERIFY START"
DB      $00

ld      ix,$040d                        ;[0213] dd 21 0d 04
ld      a,(DRIVE_SEL)                   ;[0217] 3a 0c 04
and     $03                             ;[021a] e6 03
ld      (ix+$00),a                      ;[021c] dd 77 00        ($040d) = DRIVE_SEL[0:1]
ld      (ix+$01),$28                    ;[021f] dd 36 01 28     
ld      (ix+$02),$10                    ;[0223] dd 36 02 10
ld      (ix+$03),$05                    ;[0227] dd 36 03 05
ld      (ix+$04),$01                    ;[022b] dd 36 04 01
ld      (ix+$05),$03                    ;[022f] dd 36 05 03
call    READ_DISK                       ;[0233] cd 13 04
cp      $ff                             ;[0236] fe ff
jp      z,VERIFY_ERROR                  ;[0238] ca 54 02        Jump if READ_DISK failed
call    OUT_STRING                      ;[023b] cd e9 03        Print confirmation string

DB      $0D
DB      $0A
DB      "VERIFY COMPLETED"
DB      $00

jp      $0179                           ;[0251] c3 79 01        Jump back to disk insertion

VERIFY_ERROR:
push    de                              ;[0254] d5
call    OUT_STRING                      ;[0255] cd e9 03

DB      $0D
DB      $0A
DB      $07
DB      "VERIFY ERROR!"
DB      $00

pop     de                              ;[0269] d1
push    de                              ;[026A] d5
call    OUT_STRING                      ;[026B] cd e9 03    Print track where the error occurred

DB      $0D
DB      $0A
DB      "TRACK  "
DB      $00

ld      e,d                             ;[0278] 5a
call    OUT_DEC                         ;[0279] cd a8 02
call    OUT_STRING                      ;[027c] cd e9 03    Print side where the error occurred

DB      $0D
DB      $0A
DB      "SIDE   "
DB      $00

ld      a,b                             ;[0289] 78
and     $04                             ;[028a] e6 04
rrca                                    ;[028c] 0f
rrca                                    ;[028d] 0f
or      $30                             ;[028e] f6 30
ld      e,a                             ;[0290] 5f
call    OUT_CHAR                        ;[0291] cd f7 03
call    OUT_STRING                      ;[0294] cd e9 03    Print sector where the error occurred

DB      $0D
DB      $0A
DB      "SECTOR "
DB      $00

pop     de                              ;[02a1] d1
call    OUT_DEC                         ;[02a2] cd a8 02
jp      RST_FLOPPY_AND_CPM              ;[02a5] c3 ec 02

; Converts the E register from binary to decimal and then
; prints it
OUT_DEC:
    push    bc                              ;[02a8] c5
    push    de                              ;[02a9] d5
    ld      a,e                             ;[02aa] 7b          
    ld      b,$0a                           ;[02ab] 06 0a
    ld      c,$ff                           ;[02ad] 0e ff
    inc     c                               ;[02af] 0c
    sub     b                               ;[02b0] 90
    jr      nc,$02af                        ;[02b1] 30 fc       Subtract $0a from the A register and increment C until A<0
    add     b                               ;[02b3] 80          In the end this is A=A%B and C=A/B
    ld      b,a                             ;[02b4] 47          
    ld      a,c                             ;[02b5] 79          
    or      $30                             ;[02b6] f6 30       Binary number to ASCII
    ld      e,a                             ;[02b8] 5f
    call    OUT_CHAR                        ;[02b9] cd f7 03    Print second decimal digit (most significant)
    ld      a,b                             ;[02bc] 78
    or      $30                             ;[02bd] f6 30       Binary number to ASCII
    ld      e,a                             ;[02bf] 5f
    call    OUT_CHAR                        ;[02c0] cd f7 03    Print first decimal digit
    pop     de                              ;[02c3] d1
    pop     bc                              ;[02c4] c1
    ret                                     ;[02c5] c9

; Use the bdos call to read from keyboard until RETURN is pressed
IN_LINE:
    push    af                              ;[02c6] f5
    push    bc                              ;[02c7] c5
    push    de                              ;[02c8] d5
    push    hl                              ;[02c9] e5
    ld      de,$02d7                        ;[02ca] 11 d7 02
    ld      c,$0a                           ;[02cd] 0e 0a
    call    $0005                           ;[02cf] cd 05 00
    pop     hl                              ;[02d2] e1
    pop     de                              ;[02d3] d1
    pop     bc                              ;[02d4] c1
    pop     af                              ;[02d5] f1
    ret                                     ;[02d6] c9

; Text input buffer used in the IN_LINE function
DB $0a                                  ;[02d7] 0a (Buffer size)
DB $b8                                  ;[02d8] b8 (Used buffer size)
DB $00                                  ;[02d9] 00
DB $00                                  ;[02da] 00
DB $00                                  ;[02db] 00
DB $00                                  ;[02dc] 00
DB $00                                  ;[02dd] 00
DB $00                                  ;[02de] 00
DB $00                                  ;[02df] 00
DB $00                                  ;[02e0] 00
DB $00                                  ;[02e1] 00
DB $00                                  ;[02e2] 00

call    OUT_STRING                      ;[02e3] cd e9 03

DB      "ERR"
DB      $00

jr      RST_FLOPPY_AND_CPM                  ;[02ea] 18 00

RST_FLOPPY_AND_CPM:
    call    ZERO_SEEK                       ;[02ec] cd f4 02
CPM_RST:        
    ld      c,$00                           ;[02ef] 0e 00
    jp      $0005                           ;[02f1] c3 05 00        Issue bdos call for system reset

ZERO_SEEK:
    ld      b,$00                           ;[02f4] 06 00           Set "move to track 0" operation
    ld      a,(DRIVE_SEL)                   ;[02f6] 3a 0c 04         
    ld      c,a                             ;[02f9] 4f              Set drive number
    call    FDC_WRAPPER                     ;[02fa] cd a4 03        Call ROM routine
    cp      $ff                             ;[02fd] fe ff           
    ret     nz                              ;[02ff] c0              Return if A!=$FF
call    OUT_STRING                      ;[0300] cd e9 03        Print error

DB      $0D
DB      $0A
DB      "ZERO SEEK ERROR!"
DB      $00

jp      CPM_RST                           ;[0339] c3 ef 02

; Move head to the track TRACK_CUR
MOVE_HEAD:
    ld      b,$20                             ;[0319] 06 20
    ld      a,(TRACK_CUR)                     ;[031b] 3a 0b 04
    ld      d,a                               ;[031e] 57
    ld      a,(DRIVE_SEL)                     ;[031f] 3a 0c 04
    ld      c,a                               ;[0322] 4f
    call    FDC_WRAPPER                       ;[0323] cd a4 03
    cp      $ff                               ;[0326] fe ff
    ret     nz                                ;[0328] c0            Jump if everything went good
call    OUT_STRING                            ;[0329] cd e9 03      Print error and reset CP/M if failed

DB      $0D
DB      $0A
DB      "SEEK ERROR!"
DB      $00

jp      CPM_RST                         ;[0370] c3 ef 02

FORMAT_TRACK:
    ld      b,$f0                           ;[033d] 06 f0       B=$f0 (command for format operation)
    ld      a,(DRIVE_SEL)                   ;[033f] 3a 0c 04
    ld      c,a                             ;[0342] 4f          C = DRIVE_SEL
    ld      a,(TRACK_CUR)                   ;[0343] 3a 0b 04    
    ld      d,a                             ;[0346] 57          D = TRACK_CUR
    or      a                               ;[0347] b7
    jr      nz,$0352                        ;[0348] 20 08       Jump if TRUCK_CUR!=0
    bit     2,c                             ;[034a] cb 51       
    jr      nz,$0352                        ;[034c] 20 04       Jump if DRIVE_SEL[2] != 0
    ld      a,$01                           ;[034e] 3e 01
    jr      $0354                           ;[0350] 18 02
    ld      a,$03                           ;[0352] 3e 03       If DRIVE_SEL[2]==1 -> A=$03 , ELSE -> A=$01
    ld      hl,$5000                        ;[0354] 21 00 50    Address where the 
    call    FDC_WRAPPER                     ;[0357] cd a4 03    Call sanco's FDC routine for "format desired track"
    cp      $ff                             ;[035a] fe ff       
    ret     nz                              ;[035c] c0          Return FDC routine didn't fail 
call    OUT_STRING                      ;[035d] cd e9 03    Otherwise print error

DB      $0D
DB      $0A
DB      "FORMAT ERROR!"
DB      $00

jp      CPM_RST                         ;[0370] c3 ef 02

; ???????
L0373:
    ld      hl,$5000                        ;[0373] 21 00 50    
    ld      e,$01                           ;[0376] 1e 01
    ld      a,(DRIVE_SEL)                   ;[0378] 3a 0c 04    Load drive number
    and     $04                             ;[037b] e6 04           
    rrca                                    ;[037d] 0f
    rrca                                    ;[037e] 0f
    ld      b,a                             ;[037f] 47          byte 2 of DRIVE_SEL becomes byte 0 of B    
    ld      a,(TRACK_CUR)                   ;[0380] 3a 0b 04    
    ld      d,a                             ;[0383] 57
    or      a                               ;[0384] b7
    jr      nz,$0392                        ;[0385] 20 0b       Jump if TRACK_CUR!=0
    bit     0,b                             ;[0387] cb 40       Test DRIVE_SEL[2]
    jr      nz,$0392                        ;[0389] 20 07       Jump if !=0 (i.e. =1)
    ld      c,$01                           ;[038b] 0e 01           
    ld      a,$10                           ;[038d] 3e 10       Write 16 times with C=$01
    jp      $0396                           ;[038f] c3 96 03
    ld      a,$05                           ;[0392] 3e 05       
    ld      c,$03                           ;[0394] 0e 03       Write 5 times with C=$03
    ld      (hl),d                          ;[0396] 72          Load TRACK_CUR
    inc     hl                              ;[0397] 23          
    ld      (hl),b                          ;[0398] 70          Load DRIVE_SEL[2]
    inc     hl                              ;[0399] 23
    ld      (hl),e                          ;[039a] 73          Load counter
    inc     hl                              ;[039b] 23
    ld      (hl),c                          ;[039c] 71          Load C (depenging on DRIVE_SEL[2] $01 or $03)
    inc     hl                              ;[039d] 23          
    inc     e                               ;[039e] 1c          Increase counter
    dec     a                               ;[039f] 3d          Decrease limit
    jp      nz,$0396                        ;[03a0] c2 96 03    Jump if limit!=0
    ret                                     ;[03a3] c9

FDC_WRAPPER:
    call    $ffa3                       ;[03a4] cd a3 ff
    call    $c018                       ;[03a7] cd 18 c0 Calls the sanco's ROM routine "FDC Read Write Format Seek routine".
    call    $ffa6                       ;[03aa] cd a6 ff
    ret                                 ;[03ad] c9


OUT_DISK_TRACE:
call    OUT_STRING                      ;[03ae] cd e9 03

; Print current track
DB      "T"
DB      $00

ld      a,(TRACK_CUR)                   ;[03b3] 3a 0b 04 
ld      e,a                             ;[03b6] 5f
call    OUT_DEC                         ;[03b7] cd a8 02
call    OUT_STRING                      ;[03ba] cd e9 03

; Print current side
DB      $20
DB      "S"
DB      $00

ld      a,(DRIVE_SEL)                   ;[03c0] 3a 0c 04
and     $04                             ;[03c3] e6 04
rrca                                    ;[03c5] 0f
rrca                                    ;[03c6] 0f
or      $30                             ;[03c7] f6 30
ld      e,a                             ;[03c9] 5f
call    OUT_CHAR                        ;[03ca] cd f7 03
call    OUT_STRING                      ;[03cd] cd e9 03

DB      $20                             ; " "
DB      $20                             ; " "
DB      $20                             ; " "
DB      $00

ld      a,($03e8)                       ;[03d4] 3a e8 03            
dec     a                               ;[03d7] 3d              Decrement line counter
ld      ($03e8),a                       ;[03d8] 32 e8 03
ret     nz                              ;[03db] c0              return if line counter != 0
ld      a,$08                           ;[03dc] 3e 08
ld      ($03e8),a                       ;[03de] 32 e8 03        Set ($03e8) to $08 again
call    OUT_STRING                      ;[03e1] cd e9 03

DB      $0D
DB      $0A
DB      $00

ret

DB $3A                                  ;[03e8] This will be changed to $08 in $01cc

; This funcion keeps printing characters starting from the address where
; the function was called + 1 until it encounters $00
OUT_STRING:
    EX      (SP),HL                     ;[03e9] e3
    ld      a, (hl)                     ;[03ea] 7e 
    inc     hl                          ;[03eb] 23
    or      a                           ;[03ec] b7
    jr      z,$03f5                     ;[03ed] 28 06
    ld      e,a                         ;[03ef] 5f
    call    OUT_CHAR                    ;[03f0] cd f7 03
    jr      $03ea                       ;[03f3] 18 f5
    ex      (sp),hl                     ;[03f5] e3
    ret                                 ;[03f6] c9

; Use the bdos call to print to console the ascii character
; stored in the E register
OUT_CHAR:
    push    af                              ;[03f7] f5
    push    bc                              ;[03f8] c5
    push    de                              ;[03f9] d5
    push    hl                              ;[03fa] e5
    ld      c,$02                           ;[03fb] 0e 02
    call    $0005                           ;[03fd] cd 05 00
    pop     hl                              ;[0400] e1
    pop     de                              ;[0401] d1
    pop     bc                              ;[0402] c1
    pop     af                              ;[0403] f1
    ret                                     ;[0404] c9

; Use the bdos call to input an ascii character from the console 
; and stores it in register A and L
IN_CHAR:
    ld      c,$01                           ;[0405] 0e 01
    call    $0005                           ;[0407] cd 05 00
    ret                                     ;[040a] c9


TRACK_CUR:
DB 00                                     ;[040b] 00
DRIVE_SEL:
; Drive selection(A: 0x00 or B: 0x01)[0:1], Side selection (?) [2]
DB 00                                     ;[040c] 00

; Reference values used in the verification process
DB 00                                     ;[040d] 00    $XX     Drive selection (Same format as DRIVE_SEL)
DB 00                                     ;[040e] 00    $28     Max number of tracks 
DB 00                                     ;[040f] 00    $10     Sectors/track in side 0 
DB 00                                     ;[0410] 00    $05     Sectors/track in side 1
DB 00                                     ;[0411] 00    $01     Bps shift factor in side 0 (256 byte/sector)
DB 00                                     ;[0412] 00    $03     Bps shift factor in side 1 (1024 byte/sector)

READ_DISK:
    ld      a,(ix+$00)                      ;[0413] dd 7e 00    
    ld      ($04ba),a                       ;[0416] 32 ba 04    ($04ba) = selected drive = (DRIVE_SEL[0:1])
    xor     a                               ;[0419] af          
    ld      ($04b5),a                       ;[041a] 32 b5 04    Set ($04b5) = $00
    call    READ_TRACK                      ;[041d] cd 47 04    
    or      a                               ;[0420] b7
    ret     nz                              ;[0421] c0          Return if A!=$00 (failed)
    ld      a,($04ba)                       ;[0422] 3a ba 04    
    bit     2,a                             ;[0425] cb 57       
    jr      nz,$0431                        ;[0427] 20 08       
    set     2,a                             ;[0429] cb d7
    ld      ($04ba),a                       ;[042b] 32 ba 04
    jp      $041d                           ;[042e] c3 1d 04
    res     2,a                             ;[0431] cb 97       
    ld      ($04ba),a                       ;[0433] 32 ba 04    Invert side bit of select drive
    ld      a,($04b5)                       ;[0436] 3a b5 04
    inc     a                               ;[0439] 3c
    ld      ($04b5),a                       ;[043a] 32 b5 04    Increase current track
    ld      b,a                             ;[043d] 47          
    ld      a,(ix+$01)                      ;[043e] dd 7e 01    
    cp      b                               ;[0441] b8          
    jp      nz,$041d                        ;[0442] c2 1d 04    Jump if current track != number of sectors ($28)
    xor     a                               ;[0445] af          
    ret                                     ;[0446] c9          Return A=$00

READ_TRACK:
    xor     a                               ;[0447] af          Reset A
    ld      ($04b6),a                       ;[0448] 32 b6 04    Set ($04b6) (i.e. current sector) = $00
    ld      a,(ix+$03)                      ;[044b] dd 7e 03    
    ld      ($04b7),a                       ;[044e] 32 b7 04    Set ($04b7) (i.e. max sector) = ($0410) = $05 
    ld      a,(ix+$05)                      ;[0451] dd 7e 05    
    ld      ($04b8),a                       ;[0454] 32 b8 04    Set ($04b8) (i.e. bts shift factor) = ($0412)
    ld      b,$43                           ;[0457] 06 43       ??
    ld      a,($04b5)                       ;[0459] 3a b5 04
    or      a                               ;[045c] b7
    jp      nz,$0474                        ;[045d] c2 74 04   Jump if ($04b5) (i.e. current track) == $00
    ld      a,($04ba)                       ;[0460] 3a ba 04       
    bit     2,a                             ;[0463] cb 57
    jp      nz,$0474                        ;[0465] c2 74 04   Jump if ($04ba)[2]!=0 (Should be == DRIVE_SEL[2] so side select (?)) 
    ld      a,(ix+$02)                      ;[0468] dd 7e 02   
    ld      ($04b7),a                       ;[046b] 32 b7 04   Set ($04b7) (i.e. number of sectors) = ($040f) = $10
    ld      a,(ix+$04)                      ;[046e] dd 7e 04
    ld      ($04b8),a                       ;[0471] 32 b8 04   Set ($04b8) = ($0411) = bps shift factor = $01
    ld      b,$40                           ;[0474] 06 40      Set operation command for sanco's routine (read sector in the HL buffer)
    ld      a,($04ba)                       ;[0476] 3a ba 04   
    ld      c,a                             ;[0479] 4f         c = drive number = ($04ba)
    ld      a,($04b5)                       ;[047a] 3a b5 04    
    ld      d,a                             ;[047d] 57         d = current track = ($04b5)
    ld      a,($04b6)                       ;[047e] 3a b6 04
    ld      e,a                             ;[0481] 5f         e = current sector = ($04b6)
    ld      hl,$04bb                        ;[0482] 21 bb 04   hl = read buffer address = $04bb
    ld      a,($04b8)                       ;[0485] 3a b8 04   a = bytes per sector shift factor = ($04b8)
    call    $ffa3                           ;[0488] cd a3 ff
    call    $c018                           ;[048b] cd 18 c0    Use sanco's routine to read sector in the HL buffer
    call    $ffa6                           ;[048e] cd a6 ff
    or      a                               ;[0491] b7          
    jp      nz,READ_TRACK_ERR               ;[0492] c2 a6 04    Jump if a!=0 <=> failed sanco's routine
    ld      a,($04b6)                       ;[0495] 3a b6 04    
    inc     a                               ;[0498] 3c          
    ld      ($04b6),a                       ;[0499] 32 b6 04    Increase ($04b6) = current sector
    ld      b,a                             ;[049c] 47          
    ld      a,($04b7)                       ;[049d] 3a b7 04    
    cp      b                               ;[04a0] b8          
    jp      nz,$0474                        ;[04a1] c2 74 04    Jump if sector!=number of sectors
    xor     a                               ;[04a4] af          A = 0
    ret                                     ;[04a5] c9          return

READ_TRACK_ERR:
    ld      a,($04b5)                       ;[04a6]
    ld      d,a                             ;[04a9] 57          d = current track
    ld      a,($04b6)                       ;[04aa] 3a b6 04
    ld      e,a                             ;[04ad] 5f          e = current sector
    ld      a,($04ba)                       ;[04ae] 3a ba 04
    ld      b,a                             ;[04b1] 47          b = drive number
    ld      a,$ff                           ;[04b2] 3e ff       a = $ff
    ret                                     ;[04b4] c9

; Used in the verify process
DB $7a                                  ;[04b5] 7a      Current track 
DB $b3                                  ;[04b6] b3      Current sector
DB $2f                                  ;[04b7] 2f      Number of sectors
DB $ca                                  ;[04b8] ca      Bytes per sector, shift factor
DB $35                                  ;[04b9] 35      Seems to be unused
DB $29                                  ;[04ba] 29      Drive number


; From now on this is used as a data section used 
; to store data from the READ_TRACK routine

DB      $AF
DB      $C3
DB      $35             ; '5'
DB      $29             ; ')'
DB      $3A             ; ':'
DB      $D1
DB      $3C             ; '<'
DB      $CD
DB      $3A             ; ':'
DB      $0B
DB      $3D             ; '='
DB      $C3
DB      $35             ; '5'
DB      $29             ; ')'
DB      $3A             ; ':'
DB      $D1
DB      $3C             ; '<'
DB      $CD
DB      $3A             ; ':'
DB      $0B
DB      $B7
DB      $C3
DB      $35             ; '5'
DB      $29             ; ')'
DB      $F6
DB      $37             ; '7'
DB      $F5
DB      $3A             ; ':'
DB      $0D
DB      $3D             ; '='
DB      $B7
DB      $CA
DB      $BD
DB      $29             ; ')'
DB      $CD
DB      $4F             ; 'O'
DB      $0B
DB      $CD
DB      $1E
DB      $0C
DB      $C2
DB      $A5
DB      $29             ; ')'
DB      $E6
DB      $A0
DB      $C2
DB      $B0
DB      $29             ; ')'
DB      $CD
DB      $08
DB      $0C
DB      $CA
DB      $B0
DB      $29             ; ')'
DB      $F1
DB      $9F
DB      $C3
DB      $35             ; '5'
DB      $29             ; ')'
DB      $F1
DB      $3F             ; '?'
DB      $9F
DB      $C3
DB      $35             ; '5'
DB      $29             ; ')'
DB      $3A             ; ':'
DB      $0D
DB      $3D             ; '='
DB      $B7
DB      $C2
DB      $A9
DB      $28             ; '('
DB      $C1
DB      $AF
DB      $21             ; '!'
DB      $85
DB      $0D
DB      $22             ; '"'
DB      $2B             ; '+'
DB      $3D             ; '='
DB      $C3
DB      $35             ; '5'
DB      $29             ; ')'
DB      $F6
DB      $37             ; '7'
DB      $F5
DB      $CD
DB      $17
DB      $2A             ; '*'
DB      $C2
DB      $BD
DB      $29             ; ')'
DB      $22             ; '"'
DB      $2B             ; '+'
DB      $3D             ; '='
DB      $78             ; 'x'
DB      $B1
DB      $CA
DB      $B0
DB      $29             ; ')'
DB      $C3
DB      $AB
DB      $29             ; ')'
DB      $F6
DB      $37             ; '7'
DB      $F5
DB      $CD
DB      $17
DB      $2A             ; '*'
DB      $C2
DB      $BD
DB      $29             ; ')'
DB      $D5
DB      $C5
DB      $7E             ; '~'
DB      $FE
DB      $2C             ; ','
DB      $C2
DB      $0F
DB      $2A             ; '*'
DB      $23             ; '#'
DB      $22             ; '"'
DB      $2B             ; '+'
DB      $3D             ; '='
DB      $CD
DB      $17
DB      $2A             ; '*'
DB      $C2
DB      $12
DB      $2A             ; '*'
DB      $22             ; '"'
DB      $2B             ; '+'
DB      $3D             ; '='
DB      $79             ; 'y'
DB      $C1
DB      $E1
DB      $B9
DB      $C2
DB      $AB
DB      $29             ; ')'
DB      $1A
DB      $BE
DB      $C2
DB      $AB
DB      $29             ; ')'
DB      $13
DB      $23             ; '#'
DB      $0D
DB      $C2
DB      $01
DB      $2A             ; '*'
DB      $C3
DB      $B0
DB      $29             ; ')'
DB      $CD
DB      $BB
DB      $04
DB      $E1
DB      $E1
DB      $C3
DB      $BD
DB      $29             ; ')'
DB      $CD
DB      $C2
DB      $0B
DB      $FE
DB      $3C             ; '<'
DB      $C4
DB      $97
DB      $04
DB      $CD
DB      $1D
DB      $0B
DB      $B7
DB      $C2
DB      $37             ; '7'
DB      $2A             ; '*'
DB      $CD
DB      $E4
DB      $0A
DB      $CD
DB      $1D
DB      $0B
DB      $FE
DB      $26             ; '&'
DB      $C2
DB      $37             ; '7'
DB      $2A             ; '*'
DB      $CD
DB      $E4
DB      $0A
DB      $C3
DB      $1F
DB      "**+=+"
DB      $11
DB      $00
DB      $00
DB      $23             ; '#'
DB      $7E             ; '~'
DB      $FE
DB      $3E             ; '>'
DB      $C2
DB      $47             ; 'G'
DB      $2A             ; '*'
DB      $54             ; 'T'
DB      $5D             ; ']'
DB      $FE
DB      $2C             ; ','
DB      $C2
DB      $51             ; 'Q'
DB      $2A             ; '*'
DB      $7A             ; 'z'
DB      $B3
DB      $C2
DB      $57             ; 'W'
DB      $2A             ; '*'
DB      $FE
DB      $0D
DB      $C2
DB      $3E             ; '>'
DB      $2A             ; '*'
DB      $23             ; '#'
DB      $E5
DB      $2A             ; '*'
DB      $2B             ; '+'
DB      $3D             ; '='
DB      $7A             ; 'z'
DB      $B3
DB      $CC
DB      $97
DB      $04
DB      $EB
DB      $7D             ; '}'
DB      $93
DB      $4F             ; 'O'
DB      $7C             ; '|'
DB      $9A
DB      $47             ; 'G'
DB      $E1
DB      $3A             ; ':'
DB      $F6
DB      $3D             ; '='
DB      $FE
DB      $20             ; ' '
DB      $C9
DB      $CD
DB      $4F             ; 'O'
DB      $0B
DB      $4F             ; 'O'
DB      $C5
DB      $C4
DB      $97
DB      $04
DB      $37             ; '7'
DB      $CD
DB      $F6
DB      $0C
DB      $23             ; '#'
DB      $7E             ; '~'
DB      $F6
DB      $40             ; '@'
DB      $77             ; 'w'
DB      $C1
DB      $E6
DB      $20             ; ' '
DB      $CC
DB      $D3
DB      $04
DB      $7E             ; '~'
DB      $E6
DB      $80
DB      $C4
DB      $AF
DB      $04
DB      $1F
DB      $1F
DB      $1F
DB      $B6
DB      $77             ; 'w'
DB      $79             ; 'y'
DB      $FE
DB      $2C             ; ','
DB      $CA
DB      $6E             ; 'n'
DB      $2A             ; '*'
DB      $C9
DB      $11
DB      $16
DB      $3E             ; '>'
DB      $01
DB      $00
DB      $4F             ; 'O'
DB      $C3
DB      $A7
DB      $2A             ; '*'
DB      $0E
DB      $00
DB      $11
DB      $66             ; 'f'
DB      $3E             ; '>'
DB      $06
DB      $3B             ; ';'
DB      $CD
DB      $C2
DB      $0B
DB      "*+=+~#"
DB      $FE
DB      $0D
DB      $CA
DB      $C4
DB      $2A             ; '*'
DB      $B9
DB      $CA
DB      $C4
DB      $2A             ; '*'
DB      $04
DB      $05
DB      $CA
DB      $AE
DB      $2A             ; '*'
DB      $12
DB      $13
DB      $05
DB      $C3
DB      $AE
DB      $2A             ; '*'
DB      $AF
DB      $12
DB      $23             ; '#'
DB      $22             ; '"'
DB      $2B             ; '+'
DB      $3D             ; '='
DB      $C9
DB      $CD
DB      $C2
DB      $0B
DB      $FE
DB      $28             ; '('
DB      $C2
DB      $97
DB      $04
DB      $CD
DB      $23             ; '#'
DB      $0B
DB      $FE
DB      $27             ; '''
DB      $C2
DB      $97
DB      $04
DB      $4F             ; 'O'
DB      $CD
DB      $A2
DB      $2A             ; '*'
DB      $CD
DB      $30             ; '0'
DB      $0B
DB      $CD
DB      $23             ; '#'
DB      $0B
DB      $FE
DB      $29             ; ')'
DB      $C4
DB      $97
DB      $04
DB      $C3
DB      $3A             ; ':'
DB      $0B
DB      $3E             ; '>'
DB      $01
DB      $32             ; '2'
DB      $14
DB      $3D             ; '='
DB      $C3
DB      $3B             ; ';'
DB      $2B             ; '+'
DB      $AF
DB      $32             ; '2'
DB      $14
DB      $3D             ; '='
DB      $C3
DB      $3B             ; ';'
DB      $2B             ; '+'
DB      $AF
DB      $32             ; '2'
DB      $12
DB      $3D             ; '='
DB      $C3
DB      $3B             ; ';'
DB      $2B             ; '+'
DB      $CD
DB      $4F             ; 'O'
DB      $0B
DB      $C2
DB      $29             ; ')'
DB      $2B             ; '+'
DB      $0C
DB      $0D
DB      $CA
DB      $29             ; ')'
DB      $2B             ; '+'
DB      $F5
DB      $CD
DB      $08
DB      $0C
DB      $C4
DB      $1E
DB      $0C
DB      $C2
DB      $1C
DB      $2B             ; '+'
DB      $7E             ; '~'
DB      $F6
DB      $40             ; '@'
DB      $77             ; 'w'
DB      $F1
DB      $FE
DB      $2C             ; ','
DB      $C0
DB      $CD
DB      $4F             ; 'O'
DB      $0B
DB      $C2
DB      $BB
DB      $04
DB      $C3
DB      $0E
DB      $2B             ; '+'
DB      $3E             ; '>'
DB      $01
DB      $32             ; '2'
DB      $12
DB      $3D             ; '='
DB      $C9
DB      $3E             ; '>'
DB      $FF
DB      $32             ; '2'
DB      $13
DB      $3D             ; '='
DB      $C3
DB      $3B             ; ';'
DB      $2B             ; '+'
DB      $AF
DB      $32             ; '2'
DB      $13
DB      $3D             ; '='
DB      $C3
DB      $3A             ; ':'
DB      $0B
DB      $3E             ; '>'
DB      $01
DB      $32             ; '2'
DB      $13
DB      $3D             ; '='
DB      $C3
DB      $3B             ; ';'
DB      $2B             ; '+'
DB      $AF
DB      $C3
DB      $5F             ; '_'
DB      $2B             ; '+'
DB      $3E             ; '>'
DB      $FF
DB      $C3
DB      "_+:r@/o:"
DB      $D1
DB      $3C             ; '<'
DB      $B7
DB      $CA
DB      ";+}2r@2"
DB      $0F
DB      $3D             ; '='
DB      $C3
DB      $3B             ; ';'
DB      $2B             ; '+'
DB      $3E             ; '>'
DB      $01
DB      $32             ; '2'
DB      $CF
DB      $3C             ; '<'
DB      $C3
DB      $3B             ; ';'
DB      $2B             ; '+'
DB      $AF
DB      $32             ; '2'
DB      $CF
DB      $3C             ; '<'
DB      $C3
DB      $3B             ; ';'
DB      $2B             ; '+'
DB      $3E             ; '>'
DB      $FF
DB      $32             ; '2'
DB      $D7
DB      $3C             ; '<'
DB      $CD
DB      $A9
DB      $28             ; '('
DB      $AF
DB      $32             ; '2'
DB      $D7
DB      $3C             ; '<'
DB      $7A             ; 'z'
DB      $B7
DB      $C2
DB      $97
DB      $04
DB      $3A             ; ':'
DB      $F6
DB      $3D             ; '='
DB      $FE
DB      $20             ; ' '
DB      $C0
DB      $7B             ; '{'
DB      $3D             ; '='
DB      $F8
DB      $CA
DB      $97
DB      $04
DB      $FE
DB      $10
DB      $D2
DB      $97
DB      $04
DB      $3C             ; '<'
DB      $32             ; '2'
DB      $D6
DB      $3C             ; '<'
DB      $AF
DB      $67             ; 'g'
DB      $6B             ; 'k'
DB      $C3
DB      $2E             ; '.'
DB      $1B
DB      $CD
DB      $A9
DB      $28             ; '('
DB      $7A             ; 'z'
DB      $B7
DB      $C2
DB      $97
DB      $04
DB      $3A             ; ':'
DB      $D1
DB      $3C             ; '<'
DB      $B7
DB      $C8
DB      $7B             ; '{'
DB      $B7
DB      $CA
DB      $C3
DB      $2B             ; '+'
DB      $FE
DB      $0A
DB      $DC
DB      $97
DB      $04
DB      $3A             ; ':'
DB      $F6
DB      $3D             ; '='
DB      $FE
DB      $20             ; ' '
DB      $C2
DB      $C3
DB      $2B             ; '+'
DB      $7B             ; '{'
DB      $32             ; '2'
DB      $17
DB      $3D             ; '='
DB      $CD
DB      $25             ; '%'
DB      $19
DB      $CD
DB      $39             ; '9'
DB      $04
DB      $C3
DB      $6A             ; 'j'
DB      $1A
DB      $CD
DB      $4F             ; 'O'
DB      $0B
DB      $C2
DB      $97
DB      $04
DB      $F5
DB      $3A             ; ':'
DB      $CE
DB      $3D             ; '='
DB      $FE
DB      $08
DB      $DA
DB      $E0
DB      $2B             ; '+'
DB      $CD
DB      $C7
DB      $04
DB      $3E             ; '>'
DB      $07
DB      $21             ; '!'
DB      $C7
DB      $3D             ; '='
DB      $77             ; 'w'
DB      $23             ; '#'
DB      $22             ; '"'
DB      $24             ; '$'
DB      $3D             ; '='
DB      $3A             ; ':'
DB      $D1
DB      $3C             ; '<'
DB      $B7
DB      $0E
DB      $03
DB      $C4
DB      $A3
DB      $1B
DB      $F1
DB      $FE
DB      $2C             ; ','
DB      $CA
DB      $CC
DB      $2B             ; '+'
DB      $C9
DB      $3A             ; ':'
DB      $11
DB      $3D             ; '='
DB      $B7
DB      $C2
DB      $BB
DB      $04
DB      $CD
DB      $C2
DB      $0B
DB      $2A             ; '*'
DB      $2B             ; '+'
DB      $3D             ; '='
DB      $2B             ; '+'
DB      $CD
DB      $33             ; '3'
DB      $4E             ; 'N'
DB      $B7
DB      $CA
DB      $13
DB      $2C             ; ','
DB      $CD
DB      $F6
DB      $4E             ; 'N'
DB      $C3
DB      $D9
DB      $04
DB      $3D             ; '='
DB      $32             ; '2'
DB      $11
DB      "=*+=~#"
DB      $22             ; '"'
DB      $2B             ; '+'
DB      $3D             ; '='
DB      $FE
DB      $21             ; '!'
DB      $D2
DB      $17
DB      $2C             ; ','
DB      $C9
DB      $CD
DB      $C2
DB      $0B
DB      $FE
DB      $28             ; '('
DB      $C2
DB      $97
DB      $04
DB      $CD
DB      $23             ; '#'
DB      $0B
DB      $FE
DB      $27             ; '''
DB      $C2
DB      $97
DB      $04
DB      $CD
DB      $4F             ; 'O'
DB      $0B
DB      $C2
DB      $97
DB      $04
DB      $FE
DB      $27             ; '''
DB      $C2
DB      $97
DB      $04
DB      $CD
DB      $23             ; '#'
DB      $0B
DB      $FE
DB      $29             ; ')'
DB      $C2
DB      $97
DB      $04
DB      $CD
DB      $3A             ; ':'
DB      $0B
DB      $3A             ; ':'
DB      $D1
DB      $3C             ; '<'
DB      $B7
DB      $C0
DB      $3A             ; ':'
DB      $CE
DB      $3D             ; '='
DB      $FE
DB      $06
DB      $DA
DB      $5A             ; 'Z'
DB      $2C             ; ','
DB      $3E             ; '>'
DB      $06
DB      $11
DB      $CF
DB      "=!B?G~"
DB      $B7
DB      $C2
DB      $AF
DB      $04
DB      $1A
DB      $77             ; 'w'
DB      $23             ; '#'
DB      $13
DB      $05
DB      $C2
DB      $66             ; 'f'
DB      $2C             ; ','
DB      $70             ; 'p'
DB      $C9
DB      $CD
DB      $B6
DB      $2C             ; ','
DB      $CD
DB      $C2
DB      $0B
DB      $FE
DB      $2F             ; '/'
DB      $C2
DB      $97
DB      $04
DB      $CD
DB      $4F             ; 'O'
DB      $0B
DB      $C4
DB      $AE
DB      $2C             ; ','
DB      $FE
DB      $2F             ; '/'
DB      $C2
DB      $97
DB      $04
DB      $CD
DB      $3A             ; ':'
DB      $0B
DB      $CD
DB      $F6
DB      $0C
DB      $23             ; '#'
DB      $7E             ; '~'
DB      $E6
DB      $D0
DB      $C2
DB      $AF
DB      $04
DB      $E5
DB      $7E             ; '~'
DB      $F6
DB      $24             ; '$'
DB      $77             ; 'w'
DB      $CD
DB      $17
DB      $27             ; '''
DB      $E1
DB      $2B             ; '+'
DB      $22             ; '"'
DB      $BF
DB      $3D             ; '='
DB      $3E             ; '>'
DB      $03
DB      $32             ; '2'
DB      $B6
DB      $3D             ; '='
DB      $21             ; '!'
DB      $00
DB      $00
DB      $22             ; '"'
DB      $B7
DB      $3D             ; '='
DB      $C3
DB      $96
DB      $26             ; '&'
DB      $F5
DB      $3E             ; '>'
DB      $01
DB      $32             ; '2'
DB      $CE
DB      $3D             ; '='
DB      $F1
DB      $C9
DB      $3A             ; ':'
DB      $C9
DB      $3D             ; '='
DB      $B7
DB      $C8
DB      $C1
DB      $C3
DB      $C1
DB      $04
DB      $11
DB      $80
DB      $00
DB      $CD
DB      $4F             ; 'O'
DB      $0B
DB      $C2
DB      $E8
DB      $2C             ; ','
DB      $F5
DB      $B7
DB      $D5
DB      $CD
DB      $F6
DB      $0C
DB      $CD
DB      $F7
DB      $2C             ; ','
DB      $D1
DB      $7E             ; '~'
DB      $B2
DB      $77             ; 'w'
DB      $23             ; '#'
DB      $7E             ; '~'
DB      $E6
DB      $64             ; 'd'
DB      $C2
DB      $EE
DB      $2C             ; ','
DB      $7E             ; '~'
DB      $E6
DB      $03
DB      $B3
DB      $77             ; 'w'
DB      $F1
DB      $FE
DB      $2C             ; ','
DB      $CA
DB      $C2
DB      $2C             ; ','
DB      $C9
DB      $CD
DB      $97
DB      $04
DB      $C3
DB      $E2
DB      $2C             ; ','
DB      $F6
DB      $10
DB      $77             ; 'w'
DB      $CD
DB      $AF
DB      $04
DB      $C3
DB      $E1
DB      $2C             ; ','
DB      $7E             ; '~'
DB      $FE
DB      $40             ; '@'
DB      $C8
DB      $FE
DB      $C0
DB      $C8
DB      $E6
DB      $40             ; '@'
DB      $C8
DB      $7E             ; '~'
DB      $AF
DB      $77             ; 'w'
DB      $E5
DB      $AF
DB      "#w#w#w"
DB      $E1
DB      $C9
DB      $CD
DB      $4F             ; 'O'
DB      $0B
DB      $CD
DB      $0F
DB      $05
DB      $7E             ; '~'
DB      $87
DB      $D4
DB      $BB
DB      $04
DB      $23             ; '#'
DB      $7E             ; '~'
DB      $FE
DB      $10
DB      $CA
DB      $25             ; '%'
DB      $2D             ; '-'
DB      $FE
DB      $0F
DB      $C4
DB      $BB
DB      $04
DB      $11
DB      $80
DB      $04
DB      $C3
DB      $C2
DB      $2C             ; ','
DB      $22             ; '"'
DB      $28             ; '('
DB      $3D             ; '='
DB      $CD
DB      $54             ; 'T'
DB      $2D             ; '-'
DB      $3A             ; ':'
DB      $F6
DB      $3D             ; '='
DB      $32             ; '2'
DB      $16
DB      $3D             ; '='
DB      $FE
DB      $55             ; 'U'
DB      $C8
DB      $78             ; 'x'
DB      $E6
DB      $80
DB      $C2
DB      $A9
DB      $04
DB      $78             ; 'x'
DB      $F6
DB      $20             ; ' '
DB      $32             ; '2'
DB      $15
DB      $3D             ; '='
DB      $2A             ; '*'
DB      $28             ; '('
DB      $3D             ; '='
DB      $22             ; '"'
DB      $24             ; '$'
DB      $3D             ; '='
DB      $CD
DB      $D5
DB      $0D
DB      $EB
DB      $78             ; 'x'
DB      $C3
DB      $2E             ; '.'
DB      $1B
DB      $CD
DB      $68             ; 'h'
DB      $20             ; ' '
DB      $3A             ; ':'
DB      $A7
DB      $3E             ; '>'
DB      $B7
DB      $C8
DB      $C3
DB      $C7
DB      $04
DB      $22             ; '"'
DB      $28             ; '('
DB      $3D             ; '='
DB      $7E             ; '~'
DB      $F6
DB      $80
DB      $77             ; 'w'
DB      $7C             ; '|'
DB      $32             ; '2'
DB      $16
DB      $3D             ; '='
DB      $CD
DB      $54             ; 'T'
DB      $2D             ; '-'
DB      $78             ; 'x'
DB      $E6
DB      $80
DB      $C2
DB      $A9
DB      $04
DB      $2A             ; '*'
DB      $28             ; '('
DB      $E1
DB      $2C             ; ','
DB      $7E             ; '~'
DB      $FE
DB      $40             ; '@'
DB      $C8
DB      $FE
DB      $C0
DB      $C8
DB      $E6
DB      $40             ; '@'
DB      $C8
DB      $7E             ; '~'
DB      $AF
DB      $77             ; 'w'
DB      $E5
DB      $AF
DB      "#w#w#w"
DB      $E1
DB      $C9
DB      $CD
DB      $4F             ; 'O'
DB      $0B
DB      $CD
DB      $0F
DB      $05
DB      $7E             ; '~'
DB      $87
DB      $D4
DB      $BB
DB      $04
DB      $23             ; '#'
DB      $7E             ; '~'
DB      $FE
DB      $10
DB      $CA
DB      $25             ; '%'
DB      $2D             ; '-'
DB      $FE
DB      $0F
DB      $C4
DB      $BB
DB      $04
DB      $11
DB      $80
DB      $04
DB      $C3
DB      $C2
DB      $2C             ; ','
DB      $22             ; '"'
DB      $28             ; '('
DB      $3D             ; '='
DB      $CD
DB      $54             ; 'T'
DB      $2D             ; '-'
DB      $3A             ; ':'
DB      $F6
DB      $3D             ; '='
DB      $32             ; '2'
DB      $16
DB      $3D             ; '='
DB      $FE
DB      $55             ; 'U'
DB      $C8
